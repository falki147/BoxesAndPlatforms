<?xml version="1.0" encoding="utf-8"?>
<shader>
	<input name="inPosition" type="POSITION" />
	<input name="inNormal"   type="NORMAL" />
	<input name="inTexCoord" type="TEXCOORD" />
	<input name="uMVP"       type="MVPMAT" />
	<input name="uModelMat"  type="MODELMAT" />
	<input name="uNormMat"   type="NORMMAT" />
	<input name="uCamera"    type="CAMERAPOS" />
	<input name="uTex"       type="TEXTURE" />
	<input name="uLightDir"  type="LIGHTDIR" />
	<input name="uAmbient"   type="LIGHTAMBIENT" />
	<input name="uSpecular"  type="LIGHTSPECULAR" />
	
	<vertex>
		#version 330 core
		
		in vec3 inPosition;
		in vec3 inNormal;
		in vec2 inTexCoord;
		
		out vec3 vNormal;
		out vec2 vTexCoord;
		out vec3 vCamera;
		
		uniform mat4 uMVP;
		uniform mat4 uModelMat;
		uniform mat3 uNormMat;
		uniform vec3 uCamera;
		
		void main() {
			gl_Position = uMVP * vec4(inPosition, 1.0);
			vNormal     = inNormal * uNormMat;
			vTexCoord   = inTexCoord;
			vCamera     = uCamera - vec3(uModelMat * vec4(inPosition, 1.0));
		}
	</vertex>
	<fragment>
		#version 330 core
		
		in vec3 vNormal;
		in vec2 vTexCoord;
		in vec3 vCamera;
		
		out vec4 outColor;
		
		uniform sampler2D uTex;
		
		uniform vec3 uLightDir;
		uniform vec3 uAmbient;
		uniform vec3 uSpecular;
		
		void main() {
			vec4 diff = texture2D(uTex, vTexCoord);
			vec3 norm = normalize(vNormal);
			
			float diffFactor = max(dot(norm, uLightDir), 0);
			float specFactor = pow(max(dot(reflect(-uLightDir, norm), normalize(vCamera)), 0), 20);
			
			outColor = vec4(diff.rgb * uAmbient + diff.rgb * diffFactor + uSpecular * specFactor, diff.a);
		}
	</fragment>
</shader>
